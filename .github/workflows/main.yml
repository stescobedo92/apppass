name: Rust CI/CD

on:
  push:
    branches: [ master ]
    tags:
      - 'v*.*.*'
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-C target-cpu=native"

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        rust: [ stable ]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Targets
        shell: bash
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-pc-windows-msvc

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -- --test-threads=1

  build:
    name: Build (${{ matrix.config.name }})
    needs: test
    runs-on: ${{ matrix.config.runner }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Linux x86_64"
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            archive: tar.gz

          - name: "macOS ARM64"
            runner: macos-latest
            target: aarch64-apple-darwin
            ext: ""
            archive: tar.gz

          - name: "Windows x86_64"
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
            archive: zip

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        shell: bash
        run: |
          rustup target add ${{ matrix.config.target }}
          
          if [[ "${{ matrix.config.runner }}" == "macos-latest" ]]; then
            brew install filosottile/musl-cross/musl-cross
          elif [[ "${{ matrix.config.runner }}" == "windows-latest" ]]; then
            choco install zip -y
          fi

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          targets: ${{ matrix.config.target }}

      - name: Build Release
        shell: bash
        run: cargo build --release --target ${{ matrix.config.target }}

      - name: Package Binary
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.config.target }}/release/apppass${{ matrix.config.ext }} dist/
          
          case "${{ matrix.config.archive }}" in
            "tar.gz")
              tar -czvf "dist/apppass-${{ matrix.config.target }}.tar.gz" -C dist "apppass${{ matrix.config.ext }}"
              ;;
            "zip")
              zip -j "dist/apppass-${{ matrix.config.target }}.zip" "dist/apppass${{ matrix.config.ext }}"
              ;;
          esac

      - name: Generate Checksum
        shell: bash
        run: |
          cd dist
          if [[ "$(uname)" == "Darwin" ]]; then
            shasum -a 256 * > sha256sums.txt
          else
            sha256sum * > sha256sums.txt
          fi

      - uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.config.target }}
          path: dist/*
          retention-days: 1

  release:
    name: Create Release
    needs: [ test, build ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
          pattern: binaries-*

      - name: Prepare Assets
        shell: bash
        run: |
          mkdir -p release_assets
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.txt" -o -name "kaps*" \) -exec cp {} release_assets/ \;

      - name: Get Version
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Build Info
            - Version: ${{ steps.get_version.outputs.version }}
            - Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - Build OS: Ubuntu 22.04

            ### Supported Architectures
            | Platform      | Target                     |
            |---------------|----------------------------|
            | Linux x86_64  | x86_64-unknown-linux-gnu   |
            | macOS ARM64   | aarch64-apple-darwin       |
            | Windows x64   | x86_64-pc-windows-msvc     |

            ### Checksums
            ```sha256
            $(cat release_assets/sha256sums.txt)
            ```
          files: |
            release_assets/*
          draft: false
          prerelease: false
